CHIP CPU {

    IN  inM[16],
        instruction[16],
        reset;

    OUT outM[16],
        writeM,
        addressM[15],
        pc[15];

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    And(a=instruction[15], b=true, out=isCInstruction);

    And(a=isCInstruction, b=instruction[5], out=loadAfromC);
    Or(a=isAInstruction, b=loadAfromC, out=loadA);

    Mux16(a=instruction, b=ALUout, sel=isCInstruction, out=inA);

    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);

    And(a=isCInstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);

    Mux16(a=outA, b=inM, sel=instruction[12], out=AorM);

    ALU(x=outD, y=AorM, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=ALUout, out=outM, zr=zeroOut, ng=negOut);

    And(a=isCInstruction, b=instruction[3], out=writeM);

    Or(a=zeroOut, b=negOut, out=notPos);
    Not(in=notPos, out=posOut);

    And(a=instruction[2], b=negOut, out=j1cond);
    And(a=instruction[1], b=zeroOut, out=j2cond);
    And(a=instruction[0], b=posOut, out=j3cond);

    Or(a=j1cond, b=j2cond, out=j12cond);
    Or(a=j12cond, b=j3cond, out=jump);

    And(a=jump, b=isCInstruction, out=doJump);

    PC(in=outA, load=doJump, inc=true, reset=reset, out[0..14]=pc);
}





