// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Determine memory regions
    Not(in=address[14], out=useRAM);

    Not(in=address[13], out=notBit13);
    And(a=address[14], b=notBit13, out=useScreen);

    // Check if any lower bits (0-12) are set
    Or(a=address[0], b=address[1], out=oa1);
    Or(a=oa1, b=address[2], out=oa2);
    Or(a=oa2, b=address[3], out=oa3);
    Or(a=oa3, b=address[4], out=oa4);
    Or(a=oa4, b=address[5], out=oa5);
    Or(a=oa5, b=address[6], out=oa6);
    Or(a=oa6, b=address[7], out=or8);

    Or(a=address[8], b=address[9], out=o1);
    Or(a=o1, b=address[10], out=o2);
    Or(a=o2, b=address[11], out=o3);
    Or(a=o3, b=address[12], out=or5);

    Or(a=or8, b=or5, out=anyLowerBitsSet);
    Not(in=anyLowerBitsSet, out=lowerBitsZero);
    And(a=address[14], b=address[13], out=highBits11);
    And(a=highBits11, b=lowerBitsZero, out=useKeyboard);

    // Validate address
    Or(a=useRAM, b=useScreen, out=validTemp);
    Or(a=validTemp, b=useKeyboard, out=validAddress);
    Not(in=validAddress, out=validAddressNot);

    // Memory components
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);

    // Load signals
    And(a=useRAM, b=load, out=ramLoad);
    And(a=useScreen, b=load, out=screenLoad);

    // Output selection
    Mux16(a=screenOut, b=keyboardOut, sel=useKeyboard, out=screenKeyboardOut);
    Mux16(a=screenKeyboardOut, b=ramOut, sel=useRAM, out=intermediateOut);
    Mux16(a=intermediateOut, b=false, sel=validAddressNot, out=out);
}