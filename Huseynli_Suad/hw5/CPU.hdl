// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16], instruction[16], reset;

    OUT outM[16], writeM, addressM[15], pc[15];

    PARTS:

    // Control Logic
    Not(in=instruction[15], out=isA);
    And(a=instruction[15], b=instruction[14], out=c1);
    And(a=c1, b=instruction[13], out=isC);

    // ALU Control
    And(a=instruction[12], b=isC, out=aMux);
    Or(a=instruction[11], b=instruction[10], out=czx);
    Or(a=instruction[9], b=instruction[8], out=cny);
    Or(a=instruction[7], b=instruction[6], out=cfno);

    // Dest Control
    Or(a=instruction[5], b=instruction[4], out=ddest);
    Or(a=ddest, b=instruction[3], out=dest);

    // Jump Control
    Or(a=instruction[2], b=instruction[1], out=jpart);
    Or(a=jpart, b=instruction[0], out=jump);

    // A Register
    Mux16(a=ALUout, b=instruction, sel=isA, out=AIn);
    Or(a=isA, b=instruction[5], out=Aload);
    And(a=Aload, b=isC, out=ALoad);
    ARegister(in=AIn, load=ALoad, out=AOut);

    // D Register
    And(a=instruction[4], b=isC, out=DLoad);
    DRegister(in=ALUout, load=DLoad, out=DOut);

    // ALU Muxes
    Mux16(a=AOut, b=inM, sel=aMux, out=AM);
    ALU(
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        x=AM,
        y=DOut,
        out=ALUout,
        zr=zr,
        ng=ng
    );

    // Outputs
    And(a=instruction[3], b=isC, out=writeM);
    Mux16(a=ALUout, b=ALUout, sel=false, out=outM);
    // AddressM gets lower 15 bits of A register
    Mux16(a=AOut, b=AOut, sel=false, out[0..14]=addressM, out[15]=unusedA);

        // PC Logic
    Not(in=ng, out=pos);
    Not(in=zr, out=ne);
    And(a=pos, b=ne, out=gt);
    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[0], b=gt, out=jgt);
    Or(a=jlt, b=jeq, out=jor);
    Or(a=jor, b=jgt, out=jcond);
    And(a=jcond, b=isC, out=pcJump);

    // Program Counter Register (16-bit)
    Register(in=pcIn, load=true, out=pcReg);
    
    // Connect 15-bit pc output
    Mux16(a=pcReg, b=pcReg, sel=false, out[0..14]=pc, out[15]=unusedPC);
    
    // Increment full 16-bit counter
    Inc16(in=pcReg, out=pcInc);
    
    // Next PC selection
    Mux16(a=pcInc, b=AOut, sel=pcJump, out=pcNext);
    Mux16(a=pcNext, b=false, sel=reset, out=pcIn);
}