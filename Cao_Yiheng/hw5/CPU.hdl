// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	Mux16(a= instruction, b= ALUout, sel= instruction[15], out= toAreg);
    
    And(a=instruction[15], b=instruction[5], out=loadAC);
    Not(in= instruction[15], out= N15);
    Or(a=N15, b=loadAC, out=Ayes); 

    //Or(a= instruction[15], b= instruction[5], out= Ayes);
    And(a= instruction[15], b= instruction[3], out= WritetoM);
    Or(a= WritetoM, b= false, out= writeM);
    ARegister(in= toAreg, load= Ayes, out= Aout, out[0..14]=addressM);

    //And(a= instruction[15], b= instruction[12], out= toALU);

    Mux16(a= Aout, b= inM, sel= instruction[12], out= AorM);
    ALU(x= Dout, y= AorM, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= ALUout,out=outM, zr= zr, ng= ng);
    DRegister(in= ALUout, load= instruction[4], out= Dout);
    
    //Memory(in= ALUout, load= WritetoM, address= addressMA, out= outM);
    PC(in= Aout, load= loadpc, inc= true, reset= reset, out[0..14]= pc);

    //Prepare

    Not(in= zr, out= nzr);
    Not(in= ng, out= nng);
    //JGT
    And(a= nzr, b= nng, out= gt);
    And(a= instruction[0], b= gt, out= JGT);
    //JEQ
    And(a= instruction[1], b= zr, out= JEQ);
    //JGE
    And(a= instruction[0], b= instruction[1], out= ge);
    And(a= ge, b= nng, out= JGE);
    //JLT
    And(a= instruction[2], b= ng, out= JLT);
    //JNE
    And(a= instruction[0], b= instruction[2], out= ne);
    And(a= ne, b= nzr, out= JNE);
    //JLE
    And(a= instruction[1], b= instruction[2], out= le);
    Or(a= zr, b= ng, out= zrORng);
    And(a= le, b= zrORng, out= JLE);
    //JMP
    And(a= instruction[0], b= instruction[1], out= mp);
    And(a= mp, b= instruction[2], out= JMP);
    Or(a= JGT, b= JEQ, out= J1);
    Or(a= J1, b= JGE, out= J2);
    Or(a= J2, b= JLT, out= J3);
    Or(a= J3, b= JNE, out= J4);
    Or(a= J4, b= JLE, out= J6);
    Or(a= J6, b= JMP, out= JMPorCond);

    And(a= instruction[15], b= JMPorCond, out= loadpc);
}